//==============================================================================
//
//==Vorpal Blade (Based off the Shield/Axe from Schism)
//==Modified by LordADHD
//
//==============================================================================


ACTOR VorpalBlade : BrutalWeapon
{
	Game Doom
	+BLOODSPLATTER
	//Health 3
	Weapon.SelectionOrder 3500
	Weapon.KickBack 20
	//+WEAPON.WIMPY_WEAPON
	+WEAPON.MELEEWEAPON
	+WEAPON.NOAUTOAIM
	+WEAPON.NOALERT
	+INVENTORY.UNDROPPABLE
	+WEAPON.CHEATNOTWEAPON
	//+WEAPON.NOAUTOFIRE
	Weapon.AmmoUse1 0
	Weapon.AmmoUse2 0
	Weapon.AmmoGive1 0
	Weapon.AmmoGive2 0
	//Weapon.KickBack 150
	Weapon.AmmoType1 "Zeal"
	Weapon.AmmoType2 "Rage"
	Weapon.SlotNumber 6
	Inventory.ForbiddenTo Schism_Ranger, Schism_Sorcerer, Schism_Corvus
	Obituary "%o licked the %k's vorpal blade."
	Tag "$TAG_FWEAPFIST"
	States
	{
	Select:
		TNT1 A 0
		TNT1 A 0 A_GiveInventory("GoSpecial", 1)
		TNT1 A 0 SetPlayerProperty(0,0,0)
		SWRD A 0 A_Raise
		Wait //Goto Super::Select

	Deselect:
		SWRD O 1
		"####" A 0 A_SetCrosshair(0)
        "####" A 0 A_ZoomFactor(1.0)
		//"####" AAAAAAAAAA 0 A_Lower
		"####" QP 1
		"####" A 1
		SWRD A 0 A_Lower
		Wait

	Ready:
		SWRD O 0 A_WeaponReady
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
		"####" A 0 A_TakeInventory("GoSlashRight", 1)
	    "####" A 0 A_TakeInventory("GoSlashLeft", 1)
		"####" A 0 A_TakeInventory("GoWideSlashRight", 1)
		"####" A 0 A_TakeInventory("GoWideSlashLeft", 1)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 SetPlayerProperty(0,0,0)
		SWRD PQ 1
		SWRD A 1

		ReadyLoop:
		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        "####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_TakeInventory("rage",1)
        "####" A 0 A_JumpIfInventory("rage",1,2)
		"####" A 0 A_Jump(256,2)
		"####" A 0 A_GiveInventory("zeal",1)

		SWRD AA 2 A_WeaponReady

		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        "####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_JumpIfInventory("rage",0,2)
		"####" A 0 A_TakeInventory("rage",1)

		SWRD AA 2 A_WeaponReady

		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        "####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_TakeInventory("rage",1)
        "####" A 0 A_JumpIfInventory("rage",1,2)
		"####" A 0 A_Jump(256,2)
		"####" A 0 A_GiveInventory("zeal",1)

		SWRD AA 2 A_WeaponReady

		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        "####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_JumpIfInventory("rage",0,2)
		"####" A 0 A_TakeInventory("rage",1)

		SWRD AAA 2 A_WeaponReady

		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        "####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_TakeInventory("rage",1)
        "####" A 0 A_JumpIfInventory("rage",1,2)
		"####" A 0 A_Jump(256,2)
		"####" A 0 A_GiveInventory("zeal",1)

		SWRD AA 2 A_WeaponReady

		"####" A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		"####" A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		"####" A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		"####" A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade")
		"####" A 0 A_JumpIfInventory("Kicking",1,"DoKick")
		//"####" A 0 A_JumpIfInventory("Reloading", 1, "Reload")

		"####" A 0 A_JumpIfInventory("rage",0,2)
		"####" A 0 A_TakeInventory("rage",1)

		SWRD AA 2 A_WeaponReady

		Loop

	TossGrenade:
		"####" A 0 A_TakeInventory("TossGrenade", 1)
		"####" A 0 A_JumpIfInventory("GrenadeAmmo", 1, 1)
		Goto NoGrenade
		"####" A 0 A_Print("Can't throw grenades while dual wielding.")
		Goto ReadyLoop
	NoGrenade:
		"####" A 0 A_TakeInventory("TossGrenade", 1)
		"####" A 0 A_Print("No Grenades Left.")
		Goto ReadyLoop

	//FIRE and ALT-FIRE work hand-in-hand in this weapon (they attack continuously when one fired then the other and so forth, not really by themselves)

	Fire:
	    "####" A 0

		//Check AND/OR Give/Take 'FireStart' Inventory (ugh)
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 1, 7)
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 1, 2)

		"####" A 0 A_GiveInventory("VorpalFireStart", 1)

		"####" A 0 A_JumpIfInventory("VorpalFireStart", 2, 2)
		"####" A 0 A_Jump(256, 4)

		"####" A 0 A_TakeInventory("VorpalFireStart", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("VorpalFireStart", 1)
		///////////////////////////

		//Check AND/OR GiveTake 'AltFireStart' Inventory (if started first) (still ugh)
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 1, 5)

		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 2, 2)
		"####" A 0 A_Jump(256, 4)

		"####" A 0 A_TakeInventory("VorpalAltFireStart", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("VorpalAltFireStart", 1)
		///////////////////////////

		//Check Combo here (Fire Version)
		"####" A 0 A_GiveInventory("BladeCombo", 1)
		"####" A 0 A_GiveInventory("BCBreakerFire", 1)
		"####" A 0 A_JumpIfInventory("BCBreakerAltFire", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_TakeInventory("BladeCombo", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		////////////////////

		//Check 'BladeCombo' to throw 'Lunge' ender if inventory is 2
		"####" A 0 A_JumpIfInventory("BladeCombo", 2, "Lunge")
		////////////////////

		//"####" A 0 A_JumpIfInventory("ReadyToQuickSlashBlade", 1, "FastSlash")

		"####" A 0 A_JumpIfInventory("GoSlashRight", 1, "SlashRight")
		"####" A 0 A_JumpIfInventory("GoSlashLeft", 1, "SlashLeft")
		"####" A 0 A_JumpIfInventory("GoWideSlashRight", 1, "WideSlashRight")
		"####" A 0 A_JumpIfInventory("GoWideSlashLeft", 1, "WideSlashLeft")

		//"####" A 0 A_JumpIfInventory("IsCrouching", 1, "WideSlashLeft") //This may not even call when the other four jumps above are used
	    //"####" A 0 A_JumpIfInventory("SpecialAttackPunch", 1, "NormPunch")
		//"####" A 0 A_JumpIfInventory("SpecialAttackPunch", 1, "QuickFire")
	    //"####" A 0 A_JumpIfInventory("GoSlashLeft", 1, "SpecialAttack")
		//VPBR BA 2 //placeholder stuff

		//Check which type of Sprite Set should be used (Charge or no Charge)
		TNT1 A 0 A_JumpIfInventory("BladeIsCharged", 1, 5)
		VPBL CB 2 A_SetAngle((-2)+angle)
		"####" A 0 A_Jump(256, 3)
		VPPL CB 2 //A_SetAngle((-2)+angle)	//Razor Slash Charge Sprites (no "SetAngle", this will mess up aiming a bit!)
		////////////////////////////
	Hold:
	    "####" A 0
		"####" Z 1
		//TNT1 A 0 A_JumpIfInventory("Taunting",1,"AxeThrow") //HAHAHA! (nope :P)
		//TNT1 A 0 A_JumpIfInventory("FiredSecondary", 1, "AxeThrowReady") //Real HAHAHA!!!
		"####" A 0 A_JumpIfInventory("FiredSecondary", 1, "Lunge")
		"####" Z 1 A_Refire
		"####" A 0 A_JumpIfInventory("IsCrouching", 1, "WideSlashLeft")

	SlashLeft:
		//Take GoSlashLeft Inventory
		"####" A 0 A_TakeInventory("GoSlashLeft", 1)
		///////////////////////////

		//check zeal first (if below now, take away Blade charge)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////////////////////////////////////

		//Check Blade Charge before using up zeal
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_TakeInventory("Zeal", 5)
		///////////////////////////////////////

		//Check Rage first to determine tic skip
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 4)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPBL A 1								//Idle state to slowdown if no rage
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPPL A 1 BRIGHT								//Idle state to slowdown if no rage (Blade Charge Sprites)
		////////////////////////////////////////

		"####" A 0

		//check Blade Charge to display proper Sprites
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3)
		VPBL A 1
		"####" A 0 A_Jump(256, 2)
		VPPL A 1 BRIGHT
		////////////////////////////////////////////

        "####" A 0 A_PlaySound("Paladin/SpellCast", 2)
		"####" A 0 A_PlaySound("AXSWING")
		//"####" C 1
		//"####" A 0 A_TakeInventory("GoSlashLeft", 1)

		//NOW... For this pitch/angle/recoil/frozen stuff... I added these new jumps
		//to get rid of the miserable pitch/angle/recoil/frozen nonsense while "Charged"
		"####" B 1
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //First "Testing" Jump
		"####" A 0 SetPlayerProperty(0,1,0)
		"####" A 0 A_Recoil(-6)
		"####" A 0 A_FireCustomMissile("BladeSwing", 32, 0, 0, 30)
		//"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		//"####" A 0 A_Jump(256, 2)
		//"####" A 0 A_SpawnItemEx("BoomerangRazorReverse", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION)

		"####" C 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 24, 0, 0, 25)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Second "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 32, 1, 0, 0)
		//////////////////////////////////////////////

		"####" D 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 16, 0, 0, 20)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Third "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)
		"####" E 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 8, 0, 0, 15)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Fourth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" F 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 0, 0, 0, 10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Fifth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)
		"####" G 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -8, 0, 0, 5)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Sixth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 0, 0, 0, 0)
		//////////////////////////////////////////////

		"####" H 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -16, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Seventh "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)
		"####" I 2
		"####" A 0 A_FireCustomMissile("BladeSwing", -24, 0, 0, -5)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Eighth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 2
		"####" A 0 A_FireCustomMissile("BladeSwing", -32, 0, 0, -10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Ninth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)
		"####" J 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Tenth "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -32, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Eleventh "Testing" Jump
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((-1)+angle)
		"####" A 0 A_SetAngle((-3) + angle)
		"####" A 0 SetPlayerProperty(0,0,0)
		"####" A 0 A_JumpIfInventory("Kicking",1,"KickLeft")

		//Check to give next slash Inventory
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 2, 5)
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_GiveInventory("GoSlashRight", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("GoWideSlashRight", 1)
		///////////////////////////

		//Check Combo multiplier to Ready Weapon again (no longer used)
		//"####" A 0 A_JumpIfInventory("BladeCombo", 2, 6)
		SWRD OPQA 2 A_WeaponReady
		//////////////////////////////////

		//"####" A 0 A_Jump(256, 5)
		//SWRD OPQA 2

		//Take GoSlashRight/GoWideSlashRight Inventories
		"####" A 0 A_TakeInventory("GoSlashRight", 1)
		"####" A 0 A_TakeInventory("GoWideSlashRight", 1)
		///////////////////////////

		//Take the 'FireStart' Inventories
		"####" A 0 A_TakeInventory("VorpalFireStart", 2)
		"####" A 0 A_TakeInventory("VorpalAltFireStart", 2)
		///////////////////////////

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//Take Away Charged Blade
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickLeft")

		Goto ReadyLoop

	SlashRight:
		//Take GoSlashRight Inventory
		"####" A 0 A_TakeInventory("GoSlashRight", 1)
		///////////////////////////

		//check zeal first (if below now, take away Blade charge)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////////////////////////////////////

		//Check Blade Charge before using up zeal
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_TakeInventory("Zeal", 5)
		///////////////////////////////////////

		//Check Rage first to determine tic skip
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 4)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPBR A 1								//Idle state to slowdown if no rage
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPPR A 1								//Idle state to slowdown if no rage (Blade Charge Sprites)
		////////////////////////////////////////

		//Check Blade Charge to display proper sprite
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3)
		VPBR A 1
		"####" A 0 A_Jump(256, 2)
		VPPR A 1
		///////////////////////////////////////////

        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
		"####" A 0 A_PlaySound("AXSWING")
		//"####" A 0 A_Takeinventory("ReadyToQuickSlashBlade",1)

		//AGAIN... For this pitch/angle/recoil/frozen stuff... I added these new jumps
		//to get rid of the miserable pitch/angle/recoil/frozen nonsense while "Charged"
		"####" B 1
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //First "Testing" Jump
		"####" A 0 SetPlayerProperty(0,1,0)
		"####" A 0 A_Recoil(-6)
		"####" A 0 A_FireCustomMissile("BladeSwing", -32, 0, 0, 30)
		//"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		//"####" A 0 A_Jump(256, 2)
		//"####" A 0 A_SpawnItemEx("BoomerangRazor", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION)


		//"####" A 0 A_GiveInventory("GoSlashLeft", 1)
		"####" C 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -24, 0, 0, 25)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Second "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3)+ angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -32, 1, 0, 0)
		//////////////////////////////////////////////

		"####" D 1
		"####" A 0 A_FireCustomMissile("BladeSwing",-16, 0, 0, 20)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Third "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)
		"####" E 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -8, 0, 0, 15)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Fourth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" F 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 0, 0, 0, 10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Fifth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)
		"####" G 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 8, 0, 0, 5)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Sixth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 0, 0, 0, 0)
		//////////////////////////////////////////////

		"####" H 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 16, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Seventh "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)
		"####" I 2
		"####" A 0 A_FireCustomMissile("BladeSwing", 24, 0, 0, -5)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Eighth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 2
		"####" A 0 A_FireCustomMissile("BladeSwing", 32, 0, 0, -10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Ninth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)
		"####" J 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Tenth "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 32, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 5) //Eleventh "Testing" Jump
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 A_SetAngle((1)+angle)
		"####" A 0 A_SetAngle((3) + angle)

		"####" A 0 SetPlayerProperty(0,0,0)
		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		//Check to give next slash Inventory
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 2, 3)
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 1, 4)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_GiveInventory("GoWideSlashLeft", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("GoSlashLeft", 1)
		///////////////////////////

		//Check Combo multiplier to Ready Weapon again (no longer used)
		//"####" A 0 A_JumpIfInventory("BladeCombo", 2, 6)
		SWRD OPQA 2 A_WeaponReady
		//////////////////////////////////

		//"####" A 0 A_Jump(256, 5)
		//SWRD OPQA 2

		//Take GoSlashLeft/GoWideSlashLeft Inventories
		"####" A 0 A_TakeInventory("GoSlashLeft", 1)
		"####" A 0 A_TakeInventory("GoWideSlashLeft", 1)
		///////////////////////////

		//Take the 'FireStart' Inventories
		"####" A 0 A_TakeInventory("VorpalFireStart", 2)
		"####" A 0 A_TakeInventory("VorpalAltFireStart", 2)
		///////////////////////////

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//Take Away Charged Blade
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		Goto ReadyLoop

	WideSlashRight:
		//Take GoWideSlashRight Inventory
		"####" A 0 A_TakeInventory("GoWideSlashRight", 1)
		///////////////////////////

		//check zeal first (if below now, take away Blade charge)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////////////////////////////////////

		//Check Blade Charge before using up zeal
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_TakeInventory("Zeal", 5)
		///////////////////////////////////////

		//Check Rage first to determine tic skip
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 4)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPWR A 1								//Idle state to slowdown if no rage
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPRR A 1 BRIGHT								//Idle state to slowdown if no rage (Blade Charge Sprites)
		////////////////////////////////////////

		//check Blade Charge to display proper Sprites
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3)
		VPWR A 1
		"####" A 0 A_Jump(256, 2)
		VPRR A 1 BRIGHT
		////////////////////////////////////////////

        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
		"####" A 0 A_PlaySound("AXSWING")
		"####" A 0 A_Takeinventory("ReadyToQuickSlashBlade",1)

		//AND AGAIN... For this pitch/angle/recoil/frozen stuff... I added these new jumps
		//to get rid of the miserable pitch/angle/recoil/frozen nonsense while "Charged"
		"####" B 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //First "Testing" Jump
		"####" A 0 SetPlayerProperty(0,1,0)
		"####" A 0 A_Recoil(-6)
		"####" A 0 A_FireCustomMissile("BladeSwing", -36, 0, 0, 24)
		//"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		//"####" A 0 A_Jump(256, 2)
		//"####" A 0 A_SpawnItemEx("BoomerangRazor", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION)

		"####" C 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -30, 0, 0, 22)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Second "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -32, 1, 0, 0)
		//////////////////////////////////////////////

		"####" D 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -24, 0, 0, 20)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Third "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" E 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -18, 0, 0, 18)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fourth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" F 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -12, 0, 0, 16)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fifth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" G 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -6, 0, 0, 14)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Sixth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" H 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 0, 0, 0, 12)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Seventh "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" I 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 6, 0, 0, 10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Eighth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 0, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 12, 0, 0, 8)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Ninth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" K 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 18, 0, 0, 6)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Tenth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" L 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 24, 0, 0, 4)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Eleventh "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" M 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 28, 0, 0, 2)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Twelfth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" M 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 28, 0, 0, 2)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Thirteenth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", 32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fourteenth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 32, 0, 0, 0)
		//////////////////////////////////////////////

		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", 32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fifteenth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		//"####" A 0 SetPlayerProperty(0,0,0)
		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", 32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Sixteenth "Testing" Jump
		"####" A 0 A_SetAngle((6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 SetPlayerProperty(0,0,0)
		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		//Check to give next slash Inventory
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 2, 5)
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_GiveInventory("GoWideSlashLeft", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("GoSlashLeft", 1)
		///////////////////////////

		//Check Combo multiplier to Ready Weapon again (no longer used)
		//"####" A 0 A_JumpIfInventory("BladeCombo", 2, 6)
		SWRD OPQA 2 A_WeaponReady
		//////////////////////////////////

		//"####" A 0 A_Jump(256, 5)
		//SWRD OPQA 2

		//Take GoWideSlashLeft/GoSlashLeft Inventories
		"####" A 0 A_TakeInventory("GoWideSlashLeft", 1)
		"####" A 0 A_TakeInventory("GoSlashLeft", 1)
		///////////////////////////

		//Take the 'FireStart' Inventories
		"####" A 0 A_TakeInventory("VorpalFireStart", 2)
		"####" A 0 A_TakeInventory("VorpalAltFireStart", 2)
		///////////////////////////

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//Take Away Charged Blade
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		Goto ReadyLoop

	WideSlashLeft:
		//Take GoWideSlashLeft Inventory
		"####" A 0 A_TakeInventory("GoWideSlashLeft", 1)
		///////////////////////////

		//check zeal first (if below now, take away Blade charge)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////////////////////////////////////

		//Check Blade Charge before using up zeal
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_TakeInventory("Zeal", 5)
		///////////////////////////////////////

		//Check Rage first to determine tic skip
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 4)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPWL A 1								//Idle state to slowdown if no rage
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_JumpIfInventory("rage",50, 2) //if rage is more than 50 than strike start faster
		VPRL A 1 BRIGHT								//Idle state to slowdown if no rage (Blade Charge Sprites)
		////////////////////////////////////////

		//Check Blade Charge to display proper sprites
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3)
		VPWL A 1
		"####" A 0 A_Jump(256, 2)
		VPRL A 1 BRIGHT
		////////////////////////////////////////////

        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
		"####" A 0 A_PlaySound("AXSWING")
		"####" A 0 A_Takeinventory("ReadyToQuickSlashBlade",1)

		//AND YET AGAIN... For this pitch/angle/recoil/frozen stuff... I added these new jumps
		//to get rid of the miserable pitch/angle/recoil/frozen nonsense while "Charged"
		"####" B 2
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //First "Testing" Jump
		"####" A 0 SetPlayerProperty(0,1,0)
		"####" A 0 A_Recoil(-6)
		"####" A 0 A_FireCustomMissile("BladeSwing", 30, 0, 0, 15)
		//"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		//"####" A 0 A_Jump(256, 2)
		//"####" A 0 A_SpawnItemEx("BoomerangRazorReverse", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER|SXF_NOCHECKPOSITION)


		"####" C 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 30, 0, 0, 22)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Second "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 32, 1, 0, 0)
		//////////////////////////////////////////////

		"####" D 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 24, 0, 0, 20)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Third "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" E 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 18, 0, 0, 18)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fourth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" F 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 12, 0, 0, 16)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fifth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" G 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 6, 0, 0, 14)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Sixth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" H 1
		"####" A 0 A_FireCustomMissile("BladeSwing", 0, 0, 0, 12)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Seventh "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" I 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -6, 0, 0, 10)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Eighth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", 0, 0, 0, 0)
		//////////////////////////////////////////////

		"####" J 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -12, 0, 0, 8)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Ninth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" K 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -18, 0, 0, 6)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Tenth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" L 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -24, 0, 0, 4)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Eleventh "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -16, 0, 0, 0)
		//////////////////////////////////////////////

		"####" M 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -28, 0, 0, 2)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Twelfth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" M 1
		"####" A 0 A_FireCustomMissile("BladeSwing", -28, 0, 0, 2)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Thirteenth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", -32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fourteenth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", -32, 0, 0, 0)
		//////////////////////////////////////////////

		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", -32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Fifteenth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		//"####" A 0 SetPlayerProperty(0,0,0)
		"####" N 2
		"####" A 0 A_FireCustomMissile("BladeSwing", -32, 0, 0, 0)
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 3) //Sixteenth "Testing" Jump
		"####" A 0 A_SetAngle((-6)+angle)
		"####" A 0 A_SetPitch((0.5) + pitch)
		"####" A 0 SetPlayerProperty(0,0,0)

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		//Check to give next slash Inventory
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 2, 3)
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 1, 4)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_GiveInventory("GoSlashRight", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("GoWideSlashRight", 1)
		///////////////////////////

		//Check Combo multiplier to Ready Weapon again (no longer used)
		//"####" A 0 A_JumpIfInventory("BladeCombo", 2, 6)
		SWRD OPQA 2 A_WeaponReady
		//////////////////////////////////

		//"####" A 0 A_Jump(256, 5)
		//SWRD OPQA 2

		//Take GoSlashRight/GoWideSlashRight Inventories
		"####" A 0 A_TakeInventory("GoSlashRight", 1)
		"####" A 0 A_TakeInventory("GoWideSlashRight", 1)
		///////////////////////////

		//Take the 'FireStart' Inventories
		"####" A 0 A_TakeInventory("VorpalFireStart", 2)
		"####" A 0 A_TakeInventory("VorpalAltFireStart", 2)
		///////////////////////////

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//Take Away Charged Blade
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickRight")

		Goto ReadyLoop

	//LUNGE ENDER
	Lunge:

		//check zeal first (if below now, take away Vorpal Blade charge)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		//////////////////////////////////////////////////////////

		//Check Vorpal Blade Charge before using up zeal
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 4)
		"####" A 0 A_JumpIfInventory("Zeal", 5, 2)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_TakeInventory("Zeal", 5)
		///////////////////////////////////////////

		//Razor Charge Sprite Jumps
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 6)
		VPBU ABCD 1 A_SetPitch((-1) + pitch)
		"####" A 0 A_Jump(256, 5)
		VPBU ABCD 1 //A_SetPitch((-1) + pitch)	//Razor Charge Sprites (Since it is a "Charged" shot, no "SetPitch")
		//////////////////////////

        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
		"####" A 0 A_PlaySound("SWSWING")

		//LIKE BEFORE... For this pitch/angle/recoil stuff... I added these new jumps
		//to get rid of the miserable pitch/angle/recoil nonsense while "Charged"
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //First "Testing" Jump
		"####" A 0 A_Recoil(-18)

		//When Quietus is Charged - Perform Rail shot
		//"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		//"####" A 0 A_Jump(256, 6)
		//"####" A 0 A_AlertMonsters
		//"####" A 0 A_FireCustomMissile("QuietusRazorLungeA", 0, 0, -3, 0)
		//"####" A 0 A_FireCustomMissile("QuietusRazorLunge", 0, 0, 0, 0)
		//"####" A 0 A_RailAttack(100, 0, 0, "Green", "none", RGF_SILENT|RGF_NOPIERCING, 0, "QuietusRazorPuff",0,0,1024,0,0,0,None,-15)
		//"####" A 0 A_FireCustomMissile("QuietusRazorLungeB", 0, 0, 3, 0)
		/////////////////////////////////////////////

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", random(-5,5), 0, 0, 0)
		//////////////////////////////////////////////

		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Second "Testing" Jump
		"####" A 0 A_SetPitch((-2) + pitch)
		"####" A 0 A_FireCustomMissile("BladeLunge", 2, 0, 0, -4)
		"####" A 0 A_Saw("", "", 1, "PaladinMeleePuff", 0, 120, 0,16)
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Third "Testing" Jump
		"####" A 0 A_SetPitch((-2) + pitch)
		"####" EF 1

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", random(-5,5), 0, 0, 0)
		//////////////////////////////////////////////

		"####" A 0 A_FireCustomMissile("BladeLunge", 1, 0, 0, -2)
		"####" A 0 A_Saw("", "QUIETHIT", 1, "PaladinMeleePuff", 0, 120, 0,16)
		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Fourth "Testing" Jump
		"####" A 0 A_SetPitch((-2) + pitch)
		"####" GH 1

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", random(-5,5), 0, 0, 0)
		//////////////////////////////////////////////

		"####" A 0 A_FireCustomMissile("BladeLunge", 0, 0, 0, 0)
		"####" A 0 A_Saw("", "", 1, "PaladinMeleePuff", 0, 120, 0,16)

		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Fifth "Testing" Jump
		"####" A 0 A_SetPitch((-1) + pitch)
		"####" IJ 1

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", random(-5,5), 0, 0, 0)
		//////////////////////////////////////////////

		"####" A 0 A_FireCustomMissile("BladeLunge", -1, 0, 0, -2)
		"####" A 0 A_Saw("", "", 1, "PaladinMeleePuff", 0, 120, 0,16)

		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Sixth "Testing" Jump
		"####" A 0 A_SetPitch((-1) + pitch)
		"####" A 0 A_FireCustomMissile("BladeLunge", -2, 0, 0, -4)
		"####" A 0 A_Saw("", "", 1, "PaladinMeleePuff", 0, 120, 0,16)

		"####" A 0 A_JumpIfInventory("BladeIsCharged",1, 2) //Seventh "Testing" Jump
		"####" A 0 A_SetPitch((-1) + pitch)
		//"####" A 0 A_GiveInventory("ReadyToQuickFire", 1)

		VPBU KL 1

		//When Vorpal Blade is Charged - Perform Razor shot
		"####" A 0 A_JumpIfInventory("BladeIsCharged", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_AlertMonsters
		"####" A 0 A_FireCustomMissile("VorpalRazor", random(-5,5), 0, 0, 0)
		//////////////////////////////////////////////

		VPBU MN 3
		VPBU OPQR 2

		//Take ALL potential 'GoSlash' Inventories
		"####" A 0 A_TakeInventory("GoSlashRight", 1)
		"####" A 0 A_TakeInventory("GoWideSlashRight", 1)
		"####" A 0 A_TakeInventory("GoSlashLeft", 1)
		"####" A 0 A_TakeInventory("GoWideSlashLeft", 1)
		///////////////////////////

		//Take the 'FireStart' Inventories
		"####" A 0 A_TakeInventory("VorpalFireStart", 2)
		"####" A 0 A_TakeInventory("VorpalAltFireStart", 2)
		///////////////////////////

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//Take Away Charged Blade
		"####" A 0 A_TakeInventory("BladeIsCharged", 1)
		///////////////////////

		"####" A 0 A_JumpIfInventory("Kicking",1,"KickLeft")

		Goto ReadyLoop

	Goto ReadyLoop

	AltFire:
	    "####" A 0

		//Check AND/OR Give/Take 'AltFireStart' Inventory (ugh)
		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 1, 7)
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 1, 2)

		"####" A 0 A_GiveInventory("VorpalAltFireStart", 1)

		"####" A 0 A_JumpIfInventory("VorpalAltFireStart", 2, 2)
		"####" A 0 A_Jump(256, 4)

		"####" A 0 A_TakeInventory("VorpalAltFireStart", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("VorpalAltFireStart", 1)
		///////////////////////////

		//Check AND/OR GiveTake 'FireStart' Inventory (if started first) (still ugh)
		"####" A 0 A_JumpIfInventory("VorpalFireStart", 1, 5)

		"####" A 0 A_JumpIfInventory("VorpalFireStart", 2, 2)
		"####" A 0 A_Jump(256, 4)

		"####" A 0 A_TakeInventory("VorpalFireStart", 1)
		"####" A 0 A_Jump(256, 2)
		"####" A 0 A_GiveInventory("VorpalFireStart", 1)
		///////////////////////////

		//Check Combo here (AltFire Version)
		"####" A 0 A_GiveInventory("BladeCombo", 1)
		"####" A 0 A_GiveInventory("BCBreakerAltFire", 1)
		"####" A 0 A_JumpIfInventory("BCBreakerFire", 1, 2)
		"####" A 0 A_Jump(256, 3)
		"####" A 0 A_TakeInventory("BladeCombo", 1)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		////////////////////

		//Check 'BladeCombo' to throw 'Lunge' ender if inventory is 2
		"####" A 0 A_JumpIfInventory("BladeCombo", 2, "Lunge")
		////////////////////

		//"####" A 0 A_JumpIfInventory("ReadyToQuickSlashBlade", 1, "FastSlash")

		"####" A 0 A_JumpIfInventory("GoSlashRight", 1, "SlashRight")
		"####" A 0 A_JumpIfInventory("GoSlashLeft", 1, "SlashLeft")
		"####" A 0 A_JumpIfInventory("GoWideSlashRight", 1, "WideSlashRight")
		"####" A 0 A_JumpIfInventory("GoWideSlashLeft", 1, "WideSlashLeft")

		"####" A 0 A_JumpIfInventory("IsCrouching", 1, "WideSlashRight")
	    //"####" A 0 A_JumpIfInventory("SpecialAttackPunch", 1, "NormPunch")
		//"####" A 0 A_JumpIfInventory("SpecialAttackPunch", 1, "QuickFire")
	    //"####" A 0 A_JumpIfInventory("GoSlashLeft", 1, "SpecialAttack")
		//VPBR BA 2 //placeholder stuff

		//Check which type of Sprite Set should be used (Charge or no Charge)
		TNT1 A 0 A_JumpIfInventory("BladeIsCharged", 1, 5)
		VPBR CB 2 A_SetAngle((-2)+angle)
		"####" A 0 A_Jump(256, 3)
		VPPR CB 2 //A_SetAngle((-2)+angle)	//Razor Slash Charge Sprites (no "SetAngle", this will mess up aiming a bit!)
		////////////////////////////
	AltHold:
	    "####" A 0
	    "####" Z 1
		//TNT1 A 0 A_JumpIfInventory("Taunting",1,"AxeThrow") //HAHAHA! (nope :P)
		//TNT1 A 0 A_JumpIfInventory("FiredSecondary", 1, "AxeThrowReady") //Real HAHAHA!!!
		"####" A 0 A_JumpIfInventory("FiredPrimary", 1, "Lunge")
		"####" Z 1 A_Refire
		"####" A 0 A_JumpIfInventory("IsCrouching", 1, "WideSlashRight")
		Goto SlashRight

	Steady:
	TNT1 A 1
	TNT1 A 0 ACS_Execute(477, 0, 0, 0, 0)
	Goto ReadyLoop

	DoKick:
    TNT1 A 0

		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

		TNT1 A 0 A_Takeinventory("Zoomed",1)
        TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_Takeinventory("ADSmode",1)
		NULL A 0 A_JumpIf (momZ > 0, "AirKick")
		NULL A 0 A_JumpIf (momZ < 0, "AirKick")
		TNT1 A 0 A_JumpIfInventory("IsCrouching", 1, "SlideAttack")
		RIFF A 0 A_FireCustomMissile("KickAttackDetectDowned", 0, 0, 0, 0)
        TNT1 A 0 A_jumpifinventory("PowerStrength",1,"BerserkerKick")
        TNT1 A 0 A_PlaySound("Paladin/MediumExert", 2)
		TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 SetPlayerProperty(0,1,0)
		AXKI ABCD 1
		RIFF A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -7)
   		//TNT1 A 0 A_Giveinventory("ReadyToQuickSlashBlade",1)
		TNT1 A 0 A_Giveinventory("GoWideSlashRight",1)
		K1CK H 5
		K1CK A 0 A_Takeinventory("Kicking",1)
		K1CK I 1
		K1CK GFE 1 A_WeaponReady
		AXKI DCBA 1 A_WeaponReady
		TNT1 A 0 SetPlayerProperty(0,0,0)

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//TNT1 A 0 A_Takeinventory("ReadyToQuickSlashBlade",1)
		TNT1 A 0 A_Takeinventory("GoWideSlashRight",1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyLoop
    BerserkerKick:
		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
		TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 SetPlayerProperty(0,1,0)
		AXKI ABCD 1
        RIFF A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -7)
		//TNT1 A 0 A_Giveinventory("ReadyToQuickSlashBlade",1)
		TNT1 A 0 A_GiveInventory("GoWideSlashRight", 1)
        K1CK H 5
		K1CK A 0 A_Takeinventory("Kicking",1)
		K1CK I 1
		K1CK GFE 1 A_WeaponReady
		AXKI DCBA 1 A_WeaponReady
		TNT1 A 0 SetPlayerProperty(0,0,0)

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//TNT1 A 0 A_Takeinventory("ReadyToQuickSlashBlade",1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyLoop

	KickRight:
		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

		K1K2 ABC 1
        "####" A 0 A_PlaySound("Paladin/MediumExert", 2)
        TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 A_Giveinventory("Punching",1)
		TNT1 A 0 A_SetPitch(-6 + pitch)
		K1K2 D 1
		PUN2 A 0 A_FireCustomMissile("KickAttack", 0,0,0,-7)
		TNT1 A 0 A_GiveInventory("GoSlashLeft", 1)
		K1K2 DD 1
		K1K2 ECBA 1 A_WeaponReady
		TNT1 A 5 A_TakeInventory("Kicking",1)

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		Goto ReadyLoop


	KickLeft:
		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

		K1K1 ABC 1
        TNT1 A 0 A_PlaySound("Paladin/MediumExert", 2)
        TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 A_Giveinventory("Punching",1)
		TNT1 A 0 A_SetPitch(-6 + pitch)
		K1K1 D 1
		PUN2 A 0 A_FireCustomMissile("KickAttack", 0,0,0,-7)
		//TNT1 A 0 A_GiveInventory("ReadyToQuickSlashBlade", 1)
		TNT1 A 0 A_GiveInventory("GoWideSlashRight", 1)
		K1K1 DD 1
		K1K1 ECBA 1 A_WeaponReady
		TNT1 A 5 A_TakeInventory("Kicking",1)

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		//TNT1 A 0 A_TakeInventory("ReadyToQuickSlashBlade", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		Goto ReadyLoop

	AirKick:
		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

	    TNT1 A 0 A_jumpifinventory("PowerStrength",1,"SuperAirKick")
        TNT1 A 0 A_PlaySound("Paladin/MediumExert", 2)
		TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 A_Recoil (-6)
		K1CK JKLMN 1
        RIFF A 0 A_FireCustomMissile("AirKickAttack", 0, 0, 0, -31)
		TNT1 A 0 A_GiveInventory("GoSlashLeft", 1)
        K1CK O 3
		K1CK A 0 A_Takeinventory("Kicking",1)
		K1CK PQRST 2 A_WeaponReady

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyLoop

	SuperAirKick:
		//By Default Take All Inventories relating to the various attacks
		TNT1 A 0 A_TakeInventory("GoSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashRight", 1)
		TNT1 A 0 A_TakeInventory("GoWideSlashLeft", 1)
		//////////////////////////////////////////////

        TNT1 A 0 A_PlaySound("Paladin/LongExert", 2)
		TNT1 A 0 A_PlaySound("KICK")
		TNT1 A 0 A_Recoil (-6)
		K1CK JKLMN 1
        RIFF A 0 A_FireCustomMissile("SuperAirKickAttack", 0, 0, 0, -31)
		TNT1 A 0 A_GiveInventory("GoSlashLeft", 1)
        K1CK O 3
		K1CK A 0 A_Takeinventory("Kicking",1)
		K1CK PQRST 2 A_WeaponReady

		//Take All Inventories relating to the "Combo"
		"####" A 0 A_TakeInventory("BladeCombo", 2)
		"####" A 0 A_TakeInventory("BCBreakerFire", 1)
		"####" A 0 A_TakeInventory("BCBreakerAltFire", 1)
		//////////////////////////////////////////////

		TNT1 A 0 A_TakeInventory("GoSlashLeft", 1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyLoop

	//Taunt:
/*
	Reload:
		TNT1 A 0 A_TakeInventory("Reloading",1)
		TNT1 A 0 A_JumpIfInventory("ShieldUp", 1, "PowerReflectOn")
		TNT1 A 0 A_TakeInventory("Reloading",1)
		Goto ParryUp
		//Goto GotoAxeThrow
*/

	Taunt: //here at the moment (why not? :3)
        TNT1 A 0 A_Takeinventory("Taunting",1)
		TNT1 A 0 A_JumpIfInventory("Zeal", 5, "ChargingBlade")
		TNT1 A 0 A_Print("Not enough \caZeal")
		Goto ReadyLoop

	Salute:
		TNT1 A 0
		goto ReadyLoop
	    TNT1 A 0 SetPlayerProperty(0,1,0)
		TNT1 A 0 A_ALertMonsters
		SALU ABCDEDCDEDCDEDCBA 4
		TNT1 A 0 A_TakeInventory("Salute1",1)
		TNT1 A 0 A_TakeInventory("Salute2",1)
		TNT1 A 0 SetPlayerProperty(0,0,0)
		Goto ReadyLoop

	//For Blade melee Charging when taunting
	ChargingBladeReady:
		"####" A 0 A_JumpIfInventory("Zeal", 5, "ChargingBlade")
		"####" A 0 A_Print("Not enough \caZeal")
		Goto ReadyLoop
	ChargingBlade:
		"####" A 0 A_PlaySound("Paladin/SpellCast", 2)
		//"####" A 0 A_Takeinventory("Taunting",1)
		"####" A 0 A_GiveInventory("BladeIsCharged", 1)
		SWRD WXYWXY 1 BRIGHT
		"####" A 0 A_PlaySound("AXECHARG") //maybe change this later for Vorpal Blade
		"####" WXYWXY 1 BRIGHT
		Goto ChargeReady

	ChargeReady:
		TNT1 A 0
		SWRD WXY 3 BRIGHT A_WeaponReady //A_JumpIfInventory("FiredPrimary", 1, "QuietusPowerRazor")
		TNT1 A 0
		loop
	/////////////////////////////////////
	}
}
/////////////////////

//Vorpal Blade Tokens

/////////////////////

Actor VorpalFireStart : Inventory
{
inventory.maxamount 2
}

Actor VorpalAltFireStart : Inventory
{
inventory.maxamount 2
}

Actor BladeCombo : Inventory
{
inventory.maxamount 2
}


Actor BCBreakerFire : Inventory
{
inventory.maxamount 1
}

Actor BCBreakerAltFire : Inventory
{
inventory.maxamount 1
}

Actor GoSlashRight : Inventory
{
inventory.maxamount 1
}

Actor GoSlashLeft : Inventory
{
inventory.maxamount 1
}

Actor GoWideSlashRight : Inventory
{
inventory.maxamount 1
}

Actor GoWideSlashLeft : Inventory
{
inventory.maxamount 1
}

Actor ReadyToQuickSlashBlade : Inventory //No longer used, just here as old code/inventory
{
inventory.maxamount 1
}

//For Charged Vorpal Blade Purposes
Actor BladeIsCharged : Inventory
{
inventory.maxamount 1
}
//////////////////////////

////////////////////////////////////

//Blade Attack Actors for Vorpal Blade
ACTOR BladeSwing
{
	Radius 6
	Height 6
	DamageType Cut
	Projectile
	+FORCEXYBILLBOARD
//	+NOEXTREMEDEATH
	+BLOODSPLATTER
	+FORCEPAIN
	Damage 9 //was 12
	Speed 40
	Obituary "%o was bladed by %k"
//	SeeSound "none"
//	DeathSound "none"
	Decal "none"
	States
	{
	Spawn:
		TNT1 A 1
		TNT1 A 1 BRIGHT
		Stop
	XDeath:
		TNT1 A 0 A_PlaySound("SLMETA", 1)
		TNT1 A 0 A_GiveToTarget("Rage",3) //was 2
		TNT1 A 1
		Stop
	Death:
		TNT1 A 0 A_SpawnItemEx("SwordPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		TNT1 A 1 Radius_Quake(2, 3, 0, 4, 0)
		TNT1 A 1
		Stop
	Crash:
		TNT1 A 1 A_PlaySound("SLMETA", 1)
		TNT1 A 0 A_SpawnItemEx("SwordPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0)
		TNT1 A 1
		Stop
		}
}

ACTOR BladeLunge: BladeSwing
{	DamageType Shotgun
	Speed 60
	Damage 9
	}

/////////////////////////////

///////////////////////////////////////////////////////////////

//Vorpal Blade Razor Actors

///////////////////////////////////////////////////////////////

Actor VRazorTimer : Inventory {Inventory.MaxAmount 2}

ACTOR VorpalRazor: FastProjectile
{
	Scale 1.5
	Radius 24
	Height 4
	Speed 20
	DamageType Cut
	Damage (random (50,60))
	Decal "VRazorLeftSlashDecal"
	Obituary "%o was Sliced by %k Vorpal Razor."
	Projectile
	ProjectileKickBack 0
	Reactiontime 2
	Mass 0
	+MISSILE
	+RIPPER
	+EXTREMEDEATH
	+NOGRAVITY
	+NOCLIP //using this for the moment cause it projectile is so fat
	//SeeSound "QUIETLOP"
renderstyle ADD
alpha 0.90
Scale 1.0
	DeathSound "QUIETEX2"
	States
	{
	Spawn:
	    VFSK A 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 0 A_ChangeFlag("NOCLIP", 0)
		"####" AA 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 1 BRIGHT A_FadeOut(0.1)
		"####" A 0 A_CustomMissile ("ExplosionParticleHeavy", 3, 0, random (0, 360), 2, random (0, 360))
		"####" A 0 A_ChangeFlag("NOCLIP", 0)
		"####" A 0 A_playsound("QUIETLOP",12,1,true)
		//"####" A 0 A_ChangeFlag("NOCLIP", 0)
		Goto Fly
	Fly:
        VFSK A 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 1 BRIGHT A_FadeOut(0.1)
		"####" A 0 A_CustomMissile ("ExplosionParticleHeavy", 3, 0, random (0, 360), 2, random (0, 360))
        "####" A 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 1 BRIGHT A_FadeOut(0.1)
		"####" A 0 A_CustomMissile ("ExplosionParticleHeavy", 3, 0, random (0, 360), 2, random (0, 360))
        "####" A 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 1 BRIGHT A_FadeOut(0.1)
		//"####" A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))
        //"####" AA 1 BRIGHT A_SpawnItem("GreenFlare")
		//"####" A 0 A_CustomMissile ("BFGTrailParticle", 3, 0, random (0, 360), 2, random (0, 360))
        //"####" AA 1 BRIGHT A_SpawnItem("GreenFlare")
		//"####" A 0 A_CustomMissile ("BFGTrailParticle", 3, 0, random (0, 360), 2, random (0, 360))
		"####" A 0 A_ChangeFlag("RIPPER", 0)
	FlyWeak:
		TNT1 A 0 A_JumpIfInventory("VRazorTimer", 2, "Death")
        VFSK A 1 BRIGHT A_SpawnItem("RedFlare")
		"####" A 1 BRIGHT A_FadeOut(0.1)
		"####" A 0 A_CustomMissile ("ExplosionParticleHeavy", 3, 0, random (0, 360), 2, random (0, 360))
		"####" A 0 A_Countdown
		"####" A 0 A_GiveInventory("VRazorTimer",1)
		Loop

	Death:
	TNT1 A 0 A_stopsound(12)
	BFGN A 0 A_JumpIfInventory("DMgame", 1, 3)
	TNT1 A 0 A_SpawnItemEx ("VorpalRazorExplosion",0,0,13,0,0,0,0,SXF_NOCHECKPOSITION,0)
	TNT1 A 0 A_Jump(256, 2)
	TNT1 A 0 A_SpawnItemEx ("VorpalRazorExplosionDM",0,0,13,0,0,0,0,SXF_NOCHECKPOSITION,0)
	TNT1 AAAAAAAAAAA 0 A_CustomMissile ("ExplosionParticleHeavy", 3, 0, random (0, 360), 2, random (0, 360))
	VRPP ABDEFGHIJKLMNOPQR 1 BRIGHT A_SpawnItem("RedFlare")
	Stop
	}
}

actor VorpalRazorExplosion
{
+MISSILE
Radius 2
Height 2
Damagetype ExplosiveImpact
Species "Marines"
Obituary "%o was exploded by %k Vorpal Razor."
+THRUSPECIES
+MTHRUSPECIES
States    {
    Spawn:
	Goto Death
	Death:
	TNT1 A 0
	TNT1 A 0 A_SpawnItem("WhiteShockwave")
	TNT1 A 3
	TNT1 A 0 A_Explode(100,150,0)
        Stop}}

actor VorpalRazorExplosionDM : VorpalRazorExplosion
{
Species "None"
-THRUSPECIES
-MTHRUSPECIES
}

///////////////////////////////////////////////////////////////

//Boomerang Razor Actor (NOTE: THESE AER NO LONGER USED BUT I

//AM KEEPING THESE HERE ATM CAUSE THEY WERE SO COOL AND WE COULD USE EM LATER MAYBE ;)

///////////////////////////////////////////////////////////////

Actor BoomerangCounter : Inventory {Inventory.MaxAmount 4}
Actor RazorTimer : Inventory {Inventory.MaxAmount 250}

ACTOR BoomerangRazor
{
	RenderStyle "Add"
	Radius 16
	Height 4
	Scale 1.0
	species "Marines"
	Projectile
	damagetype Cut
	Damage (random (20,30))
	Decal "VRazorLeftSlashDecal"
	+MISSILE
	+DONTHURTSPECIES
	+THRUSPECIES
	+MTHRUSPECIES
	+RIPPER
	+EXTREMEDEATH
	+BLOODLESSIMPACT
	+FRIENDLY
	DeathSound "QUIETEX2"
	var int user_angle;
	var int user_xoffset;
	var int user_yoffset;
	var int user_zoffset;
	States
	{
  Spawn:
    TNT1 A 0 NoDelay A_SetUserVar("user_xoffset", 32)
  SetVars:
    TNT1 A 0 A_SetUserVar("user_yoffset", 0)
    TNT1 A 0 A_SetUserVar("user_zoffset", 32)
    TNT1 A 0 A_SetUserVar("user_angle", 0)
  AnimInit:
    TNT1 A 1 A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                    WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
  AnimLoop:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 50, "AnimLoopStay")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle + 24)
	TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset + 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop

  AnimLoopStay:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 200, "AnimLoopReturn")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle + 24)
	//TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset + 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop

  AnimLoopReturn:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 250, "Destroy")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle + 24)
	TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset - 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop
  Destroy:
    TNT1 A 0 A_TakeFromTarget("BoomerangCounter", 1, 0, AAPTR_PLAYER1 | AAPTR_PLAYER2 | AAPTR_PLAYER3 | AAPTR_PLAYER4)
	TNT1 A 0 A_TakeFromTarget("AllCounter", 1, 0, AAPTR_PLAYER1 | AAPTR_PLAYER2 | AAPTR_PLAYER3 | AAPTR_PLAYER4)
	RealDestroy:
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
    TNT1 A 0 A_SetUserVar("user_angle", user_angle + 24)
    TNT1 AAAAAAAAAAA 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))
	VRPP ABDEFGHIJKLMNOPQR 1 BRIGHT A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
    Stop

  Death:
	//TNT1 A 0 A_stopsound(12)
	TNT1 AAAAAAAAAAA 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))
	VRPP ABDEFGHIJKLMNOPQR 1 BRIGHT A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	Stop
  }
}

ACTOR BoomerangRazorReverse : BoomerangRazor
{

	States
	{
  Spawn:
    TNT1 A 0 NoDelay A_SetUserVar("user_xoffset", 32)
  SetVars:
    TNT1 A 0 A_SetUserVar("user_yoffset", 0)
    TNT1 A 0 A_SetUserVar("user_zoffset", 32)
    TNT1 A 0 A_SetUserVar("user_angle", 0)
  AnimInit:
    TNT1 A 1 A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                    WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
  AnimLoop:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 50, "AnimLoopStay")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle - 24)
	TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset + 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop

  AnimLoopStay:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 200, "AnimLoopReturn")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle - 24)
	//TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset + 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop

  AnimLoopReturn:
  	TNT1 A 0
	TNT1 A 0 A_JumpIfInventory("RazorTimer", 250, "Destroy")
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
	TNT1 A 0 A_SetUserVar("user_angle", user_angle - 24)
	TNT1 A 0 A_SetUserVar("user_xoffset", user_xoffset - 1)
    TNT1 A 0 A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	TNT1 A 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))

	TNT1 A 0 A_GiveInventory("RazorTimer",1)
	TNT1 A 0

	Loop
  Destroy:
    TNT1 A 0 A_TakeFromTarget("BoomerangCounter", 1, 0, AAPTR_PLAYER1 | AAPTR_PLAYER2 | AAPTR_PLAYER3 | AAPTR_PLAYER4)
	TNT1 A 0 A_TakeFromTarget("AllCounter", 1, 0, AAPTR_PLAYER1 | AAPTR_PLAYER2 | AAPTR_PLAYER3 | AAPTR_PLAYER4)
	RealDestroy:
    VFSK A 1 BRIGHT A_Warp(AAPTR_PLAYER1, user_xoffset, user_yoffset, user_zoffset, user_angle,
                           WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE)
    TNT1 A 0 A_SetUserVar("user_angle", user_angle - 24)
    TNT1 AAAAAAAAAAA 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))
	VRPP ABDEFGHIJKLMNOPQR 1 BRIGHT A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
    Stop

  Death:
	//TNT1 A 0 A_stopsound(12)
	TNT1 AAAAAAAAAAA 0 A_CustomMissile ("PlasmaParticle", 3, 0, random (0, 360), 2, random (0, 360))
	VRPP ABDEFGHIJKLMNOPQR 1 BRIGHT A_SpawnItemEx("RedFlare", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION)
	Stop
  }
}

/////////////////////////////////